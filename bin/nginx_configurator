#!/usr/bin/env python

import time, subprocess
from origin.synapse import Synapse

class CaptivePortalConfigurator:
    
    def __init__(self):
        self.synapse = Synapse()
        self.synapse.subscribe('captive-portal')


    def conf_updated(self, path, conf):
        # Grab templates
        with open ("/origin/captive-portal/nginx/server", "r") as server_file:
            server_template = server_file.read()
        with open ("/origin/captive-portal/nginx/servers-header", "r") as header_file:
            nginx_site_conf = header_file.read()

        # build nginx file
        for profile in conf:
            port = self.get_port(profile['id'])
            nginx_site_conf += "\n" +  server_template % {'port': port, 'authenticator_id': profile['authentication']}

        with open ("/etc/nginx/sites-enabled/captive-portal", "w") as nginx_file:
            nginx_file.write(nginx_site_conf)

        # Reload nginx
        subprocess.call('reload nginx', shell=True)

        
    def get_port(self, prodile_id):
        # inner function to use in transaction
        def _get_port(pipe):
                port = pipe.hget('portal_ports', prodile_id)
                if not port:
                    ports = pipe.hgetall('portal_ports').values()
                    port = self.get_first_available_port(ports)
                    pipe.multi() # so it is in a transaction
                    pipe.hset('portal_ports', prodile_id, port)
        
        self.synapse.transaction(_get_port, 'portal_ports')
        return self.synapse.hget('portal_ports', prodile_id)

    
    def get_first_available_port(self, ports):
        port = 20001
        while True:
            # redis returns strings....
            if str(port) not in ports:
                return port
            port += 1
        
    def ws_closed(self):
        # sleep a bit and try reconnecting
        time.sleep(30)
        self.synapse.run_forever()

    def run(self):
        self.synapse.run_forever(message_cb=self.conf_updated, close_cb=self.ws_closed)



if __name__ == "__main__":
    conf = CaptivePortalConfigurator()
    conf.run()