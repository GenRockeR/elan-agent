#!/usr/bin/env python

import time, subprocess
from origin.synapse import Synapse
from mako.template import Template


import logging
logging.basicConfig()

class AuthenticationConfigurator:
    TRACKED_KEYS = ('dot1x_authentication', 'default_secret')
    
    def __init__(self):
        self.synapse = Synapse()
        # subscribe to providers and group lists
        self.synapse.retrieve('agent/self')

        self.agent_id = None

    def conf_updated(self, path, conf):
        conf_changed = False
        # update local configuration cache
        if path == 'agent/self':
            if self.agent_id != conf['id']:
                self.agent_id = conf['id']
                self.synapse.subscribe('agent/' + str(self.agent_id))
        # Don't use values retrieved by agent/self as they will not get updated in cache when changed on cc...
        # Id should not change so it is OK to use, but for the other values, only  'agent/' + str(self.agent_id) path gets updated
        # In case of CC down, value will flip from outdated value from 'agent/self' and up to date value from 'agent/<id>'
        #if path == 'agent/self' or (self.agent_id and path == 'agent/' + str(self.agent_id)):
        if self.agent_id and path == 'agent/' + str(self.agent_id):
            for key in self.TRACKED_KEYS:
                if getattr(self, key, None) != conf[key]:
                    setattr(self, key, conf[key])
                    conf_changed = True

        if conf_changed:
            # Grab template
            server_template = Template(filename="/origin/nac/freeradius/server")
            
            with open ("/etc/freeradius/sites-enabled/nac", "w") as server_file:
                server_file.write( server_template.render(**self.__dict__) )

            # Reload freeradius
            subprocess.call('/etc/init.d/freeradius restart', shell=True)

    def run(self):
        self.synapse.run_forever(message_cb=self.conf_updated)



if __name__ == "__main__":
    conf = AuthenticationConfigurator()
    count = 1
    while count < 100:
        conf.run()
        time.sleep(30)
        count = count + 1
