#!/usr/sbin/nft -f

define agent_ip = 8.8.8.8
define agent_ip6 = 2001:41d0:2:ba47::1000:1000
define portal_ip = 8.8.8.9
define portal_ip6 = 2001:41d0:2:ba47::1000:1010

flush table bridge elan

table bridge elan {
    chain access_control_in {

        ether saddr . iif @mac_on_vlan accept

        mark set iif map @vlan_mark
    }

    chain captive_portal {
        ip  saddr . tcp sport . ip  daddr . tcp dport @ip_conn2mark  mark set iif map @vlan_mark accept
        ip6 saddr . tcp sport . ip6 daddr . tcp dport @ip6_conn2mark mark set iif map @vlan_mark accept
        
        ip  daddr $portal_ip  mark set iif map @vlan_mark accept
        ip6 daddr $portal_ip6 mark set iif map @vlan_mark accept
    }

    chain prerouting { 
        type filter hook prerouting priority -160;

        tcp dport { http, https } jump captive_portal

        iif @ac_ifs jump access_control_in
    }

    chain access_control_forward {
        mark 0 ether daddr . oif @mac_on_vlan ether daddr . iif @mac_to_vlan accept 
        mark 0 ether saddr . oif @mac_to_vlan accept
        
        ether type arp iif . oif @ndp_pt_ifs accept
        ether type arp oif . iif @ndp_pt_ifs accept
        ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } iif . oif @ndp_pt_ifs accept
        ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } oif . iif @ndp_pt_ifs accept
        
        ether type arp iif . oif @dns_pt_ifs accept
        ether type arp oif . iif @dns_pt_ifs accept
        ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } iif . oif @dns_pt_ifs accept
        ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } oif . iif @dns_pt_ifs accept
        udp dport domain iif . oif @dns_pt_ifs accept
        udp sport domain oif . iif @dns_pt_ifs accept
        
        ether daddr 01:00:5e:00:00:fb ip  daddr 224.0.0.251 udp sport 5353 udp dport 5353 accept
        ether daddr 33:33:00:00:00:fb ip6 daddr ff02::fb    udp sport 5353 udp dport 5353 accept

        ether type arp iif . oif @dhcp_pt_ifs accept
        ether type arp oif . iif @dhcp_pt_ifs accept
        ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert, nd-router-solicit } iif . oif @dhcp_pt_ifs accept
        ip6 nexthdr ipv6-icmp icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert, nd-router-advert  } oif . iif @dhcp_pt_ifs accept
        
        ip protocol udp udp sport bootpc udp dport bootps iif . oif @dhcp_pt_ifs accept
        ip protocol udp udp sport bootps udp dport bootpc oif . iif @dhcp_pt_ifs accept
        ip6 saddr {fe80::/10} ip6 daddr ff02::1:2   ip6 nexthdr udp udp sport dhcpv6-client udp dport dhcpv6-server iif . oif @dhcp_pt_ifs accept
        ip6 saddr {fe80::/10} ip6 daddr {fe80::/10} ip6 nexthdr udp udp sport dhcpv6-server udp dport dhcpv6-client oif . iif @dhcp_pt_ifs accept
        
        mark 0 tcp dport {http, https} log group 20 prefix "add" drop
        
        drop 
    }

    chain forward { 
        type filter hook forward priority -200;
    
        oif @ac_ifs jump access_control_forward
        iif @ac_ifs jump access_control_forward
    
    }
    
    chain ids { 
        type filter hook forward priority -100;
        
        iif @ids_ifs log group 10 accept
        oif @ids_ifs log group 10 accept
    }
      
    chain connections { 
        type filter hook forward priority -50;
        
        oif @log_ifs mark set 0x40000000 accept
        iif @log_ifs mark set 0x40000000 accept
    }
    
    chain postrouting {
        type filter hook postrouting priority 200;
    }
}

flush table inet elan

table inet elan {
  
    chain connections  {
        type filter hook forward priority 0;
    
        ct mark 0x40000000 accept
        mark 0x40000000 ct state new log group 5 ct mark set mark
    }
}

flush table ip elan

table ip elan {
  
    chain prerouting  { 
        type nat hook prerouting priority -150;
    
        ip daddr $agent_ip udp dport {1812, 1813, 161, 162} redirect
        ip daddr $agent_ip tcp dport {80, 443} redirect
                    
        mark != 0 tcp dport {80, 443} log group 20 prefix "remove" redirect to mark . tcp dport map @captive_portals
    }
  
    chain postrouting { 
        type nat hook postrouting priority -150;
    } 
}

flush table ip6 elan

table ip6 elan {
  
    chain prerouting  { 
        type nat hook prerouting priority -150;

        ip6 daddr $agent_ip6 udp dport {1812, 1813, 161, 162} redirect
        ip6 daddr $agent_ip6 tcp dport {80, 443} redirect
                
        mark != 0 tcp dport {80, 443} log group 20 prefix "remove" redirect to mark . tcp dport map @captive_portals
    }
  
    chain postrouting { 
        type nat hook postrouting priority -150;
    } 
}
