#!/usr/bin/env python

from __future__ import print_function

import sys
import os
import time
import socket
from idstools import spool
from impacket.ImpactDecoder import EthDecoder
from origin.neuron import Dendrite
from origin.event import Event, ExceptionEvent

dendrite = Dendrite('ids-logger')
decoder = EthDecoder()


def notify_alert(alert, packet_decoder):
    #timestamp = time.strftime('%Y-%m-%dT%H:%M:%S.'+ str(event['event-microsecond']) +'Z', time.gmtime(event['event-second']))
    event = Event(type='device-alert', source='ids', level='danger', timestamp=alert['event-second'], dendrite=dendrite)
    event.add_data('src_port', alert['sport-itype'])
    event.add_data('dst_port', alert['dport-icode'])
    event.add_data('priority', alert['priority'])
    event.add_data('signature', 
                {
                  'gid':      alert['generator-id'],
                  'sid':      alert['signature-id'],
                  'revision': alert['signature-revision'],
                }, 
                type = 'signature'
             ),
    #'vlan': event['vlan-id'],

    # decode Ethernet packet to get mac addresses and protocol
    packet = packet_decoder.decode( reduce(lambda x,y: x + y['data'], alert['packets'], '') )
    inet_family = None;
    while packet:
        if packet.__class__.__name__ == 'Ethernet':
            event.add_data( ('src_mac', packet.as_eth_addr(packet.get_ether_shost()), 'mac') )
            event.add_data( ('dst_mac', packet.as_eth_addr(packet.get_ether_dhost()), 'mac') )
        elif packet.__class__.__name__ == 'IP' and not inet_family:
            inet_family = socket.AF_INET
        elif packet.__class__.__name__ == 'IP6' and not inet_family:
            inet_family = socket.AF_INET6
            
        if packet.child().__class__.__name__ == 'Data':
            event.add_data( ('protocol', packet.__class__.__name__) )
            break
        
        packet = packet.child()

    if inet_family:
        event.add_data( ('src_ip', socket.inet_ntop(inet_family, alert['ip-source'])) )
        event.add_data( ('dst_ip', socket.inet_ntop(inet_family, alert['ip-destination'])) )

    event.notify()

def main():
    directory = '/var/log/suricata'
    prefix = 'unified2.alert'
    
    if not os.path.exists(directory):
        print("error: directory %s does not exist" % (directory), 
              file=sys.stderr)
        return 1

    reader = spool.Unified2EventSpoolReader(
            directory, prefix,
            bookmarking=True,
            delete_on_close=True)


    for alert in reader:
        try:
            alert = notify_alert(alert)
        except:
            ExceptionEvent(source='ids', dendrite=dendrite).notify()

if __name__ == "__main__":
    sys.exit(main())
    
    
