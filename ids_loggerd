#!/usr/bin/env python

from __future__ import print_function

import sys, os, socket, subprocess
from idstools import unified2
from impacket.ImpactDecoder import EthDecoder
from origin.neuron import Dendrite
from origin.event import Event, ExceptionEvent


dendrite = Dendrite('ids-logger')
decoder = EthDecoder()


def get_bridge_port(mac):
    # TODO: find a better way to get port
    return subprocess.Popen("bridge fdb | grep  '{mac}' | grep -v permanent | cut -f3 -d' '".format(mac=mac), shell=True, stdout=subprocess.PIPE)\
            .communicate()[0]\
            .split('\n',1)[0]

def notify_alert(alert):
    #timestamp = time.strftime('%Y-%m-%dT%H:%M:%S.'+ str(event['event-microsecond']) +'Z', time.gmtime(event['event-second']))
    event = Event(event_type='device-alert', source='ids', level='danger', timestamp=alert['event-second'], dendrite=dendrite)
    event.add_data('priority', alert['priority'])
    event.add_data('signature', alert['signature-id'], data_type = 'signature')
    event.add_data('revision', alert['revision'])

    # decode Ethernet packet to get mac addresses and protocol
    packet = decoder.decode( reduce(lambda x,y: x + y['data'], alert['packets'], '') )
    inet_family = None;
    direction = 'from_lan'; # from eth1 point of view
    while packet:
        if packet.__class__.__name__ == 'Ethernet':
            src_mac = packet.as_eth_addr(packet.get_ether_shost())
            dst_mac = packet.as_eth_addr(packet.get_ether_dhost())
            
            src_port = get_bridge_port(src_mac)
            dst_port = get_bridge_port(dst_mac)
            
            # TODO: find a better way to tell direction.
            if 'eth1' not in src_port and 'eth1' in dst_port: # if both on lan, consider as from lan
                direction = 'from_wan'
            
            if direction == 'from_lan':
                lan_mac = src_mac
                wan_mac = dst_mac
            else:
                lan_mac = dst_mac
                wan_mac = src_mac
            
            if lan_mac != '00:00:00:00:00:00':    
                event.add_data( 'lan_mac', lan_mac, 'mac' )
            if wan_mac != '00:00:00:00:00:00':    
                event.add_data( 'wan_mac', wan_mac, 'mac' )
            try:
                event.add_data( 'vlan_id', packet.get_tag(0).get_vid() )
            except IndexError:
                event.add_data( 'vlan_id', 0 )
        if packet.child().__class__.__name__ == 'Data':
            event.add_data( 'protocol', packet.__class__.__name__ )
            break
        
        packet = packet.child()

    if direction == 'from_lan':
        event.add_data( 'lan_ip', alert['source-ip'] )
        event.add_data( 'wan_ip', alert['destination-ip'] )
        event.add_data('lan_port', alert['sport-itype'])
        event.add_data('wan_port', alert['dport-icode'])
    else:
        event.add_data( 'lan_ip', alert['destination-ip'] )
        event.add_data( 'wan_ip', alert['source-ip'] )
        event.add_data('lan_port', alert['dport-icode'])
        event.add_data('wan_port', alert['sport-itype'])

    event.notify()

def main():
    directory = '/var/log/suricata'
    prefix = 'unified2.alert'
    
    if not os.path.exists(directory):
        print("error: directory %s does not exist" % (directory), 
              file=sys.stderr)
        return 1

    reader = unified2.SpoolEventReader(
            directory, 
            prefix,
            follow=True,
            bookmark=True,
            delete=True)


    for alert in reader:
        try:
            alert = notify_alert(alert)
        except:
            ExceptionEvent(source='ids', dendrite=dendrite).notify()

if __name__ == "__main__":
    sys.exit(main())
    
    
